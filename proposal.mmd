
My new Project to illustrate mermaid
graph TD
    A[Start] --> B{Is it working?}
    B -->|Yes| C[Continue]
    B -->|No| D[Debug]
    D --> E[Fix issue]
    E --> B
    C --> F[Complete]

​
This is a simple flowchart created with Mermaid. You can create various diagrams including:
Flowcharts (like the one above)
Sequence diagrams
Gantt charts
Entity Relationship diagrams
Class diagrams
State diagrams
To create your own diagram, simply edit the code in the code block above.
graph TD
  %% ===== Vendor Cloud (metadata only)
  subgraph VC[Vendor Cloud — Catalog & Discovery]
    VC1[Onboarding & Schema Registry]
    VC2[Company Directory / Discovery API]
    VC1 --> VC2
  end

  %% ===== Company System
  subgraph CO[Company System — Ingest & Receipts]
    CO1[Auth Surface: OAuth2 / mTLS / HMAC]
    CO2[Keys and Certs: JWK / PGP / S-MIME]
    CO3[Ingest: REST / GraphQL / Upload / SFTP / Email]
    CO4[Status / Receipt API]
    CO1 --> CO3
    CO2 --> CO3
    CO3 --> CO4
  end

  %% ===== User Device (edge)
  subgraph UE[User Device — Edge App]
    UE1[Select Company]
    UE2[Fetch Company Record]
    UE3[Consent]
    UE4[Local Vault]
    UE5[Mapping Engine]
    UE6[Package Envelope]
    UE7[Queue and Retry]
    UE8[Transport Orchestrator]
    UE9[Receipt Store]
    UE10[Status UI]
  end

  %% ===== Happy path
  UE1 --> UE2
  UE2 --> VC2
  UE2 --> UE3
  UE4 --> UE5
  UE3 --> UE5
  UE5 --> UE6
  UE6 --> UE7
  UE7 --> UE8

  %% ===== Transport options
  UE8 --> T1[REST JSON]
  UE8 --> T2[Pre-signed Upload]
  UE8 --> T3[SFTP PGP]
  UE8 --> T4[Email S-MIME]
  UE8 --> T5[GraphQL Mutation]
  UE8 --> T6[REST mTLS]

  T1 --> CO3
  T2 --> CO3
  T3 --> CO3
  T4 --> CO3
  T5 --> CO3
  T6 --> CO3

  CO3 --> CO4
  CO4 --> UE9
  UE9 --> UE10

  CO3 -->|error| UE7

User Device — Edge App

Company System — Ingest & Receipts

Vendor Cloud — Catalog & Discovery

Select Company

Fetch Company Record

Consent

Local Vault

Mapping Engine

Package Envelope

Queue and Retry

Transport Orchestrator

Receipt Store

Status UI

Auth Surface: OAuth2 / mTLS / HMAC

Keys and Certs: JWK / PGP / S-MIME

Ingest: REST / GraphQL / Upload / SFTP / Email

Status / Receipt API

Onboarding & Schema Registry

Company Directory / Discovery API

REST JSON

Pre-signed Upload

SFTP PGP

Email S-MIME

GraphQL Mutation

REST mTLS

error

​
graph TD
  %% ===== Vendor Cloud (control plane; metadata only)
  subgraph VC[Vendor Cloud Control Plane]
    VC1[Schema Registry]
    VC2[Company Directory and Discovery API]
    VC3[DiscoveryLink Service]
    VC1 --> VC2
    VC2 --> VC3
  end

  %% ===== Company System
  subgraph CO[Company System Ingest and Receipts]
    CO1[Auth Surface]
    CO2[Keys and Certs]
    CO3[Ingest Endpoint]
    CO4[Status and Receipt API]
    CO1 --> CO3
    CO2 --> CO3
    CO3 --> CO4
  end

  %% ===== Portal assets for discoverability
  subgraph DL[Nula Portal Discovery Assets]
    P1[Company Onboarding]
    P2[Generate NulaLink URL and JWT]
    P3[QR Code]
    P4[Short Code]
    P5[NFC Payload]
    P6[Web Landing Install and Continue]
    P1 --> P2
    P2 --> P3
    P2 --> P4
    P2 --> P5
    P2 --> P6
    VC3 --> P2
  end

  %% ===== Entry points and OS handoff
  subgraph EP[Entry Open or Install]
    R1[Scan QR or Tap Link]
    R2[NFC Tap]
    R3[Enter Short Code]
    R4[iOS Universal Link]
    R5[Android App Link]
    R6[Install Referrer]
    R7[App Clip or Instant App]
    R8[Web Landing Fallback]
  end

  P3 --> R1
  P2 --> R4
  P2 --> R5
  P5 --> R2
  P4 --> R3
  P6 --> R8
  R1 --> R4
  R1 --> R5
  R2 --> R4
  R2 --> R5
  R8 --> R4
  R8 --> R5

  %% ===== User Device
  subgraph UE[User Device Nula App]
    UE1[Launch from Link]
    UE2[Verify Token JWS]
    UE3[Resolve Company]
    UE4[Consent Screen]
    UE5[Local Vault]
    UE6[Mapping Engine]
    UE7[Package Envelope]
    UE8[Queue and Retry]
    UE9[Transport Orchestrator]
    UE10[Receipt Store]
    UE11[Status UI]
  end

  R4 --> UE1
  R5 --> UE1
  R6 --> UE1
  R7 --> UE1
  R3 --> UE1

  UE1 --> UE2
  UE2 --> UE3
  UE3 --> VC2
  UE3 --> UE4
  UE5 --> UE6
  UE4 --> UE6
  UE6 --> UE7
  UE7 --> UE8
  UE8 --> UE9

  %% ===== Transport options
  UE9 --> T1
  UE9 --> T2
  UE9 --> T3
  UE9 --> T4
  UE9 --> T5
  UE9 --> T6
  T1[REST JSON]
  T2[Presigned Upload]
  T3[SFTP PGP]
  T4[Email S_MIME]
  T5[GraphQL Mutation]
  T6[REST mTLS]

  T1 --> CO3
  T2 --> CO3
  T3 --> CO3
  T4 --> CO3
  T5 --> CO3
  T6 --> CO3

  %% ===== Receipts and resilience
  CO3 --> CO4
  CO4 --> UE10
  UE10 --> UE11
  CO3 -->|error| UE8

User Device Nula App

Entry Open or Install

Nula Portal Discovery Assets

Company System Ingest and Receipts

Vendor Cloud Control Plane

Launch from Link

Verify Token JWS

Resolve Company

Consent Screen

Local Vault

Mapping Engine

Package Envelope

Queue and Retry

Transport Orchestrator

Receipt Store

Status UI

Scan QR or Tap Link

NFC Tap

Enter Short Code

iOS Universal Link

Android App Link

Install Referrer

App Clip or Instant App

Web Landing Fallback

Company Onboarding

Generate NulaLink URL and JWT

QR Code

Short Code

NFC Payload

Web Landing Install and Continue

Auth Surface

Keys and Certs

Ingest Endpoint

Status and Receipt API

Schema Registry

Company Directory and Discovery API

DiscoveryLink Service

REST JSON

Presigned Upload

SFTP PGP

Email S_MIME

GraphQL Mutation

REST mTLS

error

​
